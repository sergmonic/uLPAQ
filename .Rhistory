points(PE_nplr,y_pos_nplr,pch=20,cex=.75,col="cyan")
arrows(PE_nplr-u_PE_nplr,y_pos_nplr,PE_nplr+u_PE_nplr,y_pos_nplr, length=0.05,angle = 90, code=3, col="cyan")
points(PE_ede,y_pos_nplr,pch=20,cex=.75,col="green")
arrows(PE_ede-u_PE_ede,y_pos_ede,PE_ede+u_PE_ede,y_pos_ede, length=0.05,angle = 90, code=3, col="green")
legend("topleft",c(paste("Derivada numérica:",PE_dnum),paste("regresión logística: ",PE_nplr),paste("Estimador de máxima distancia: ",PE_ede)),lty = 2,col=c("red","cyan","green"),bty ="n",cex=0.75)
legend("topleft",c(paste("Derivada numérica:",format(round(PE_dnum,2),digits = 2)),paste("regresión logística: ",PE_nplr),paste("Estimador de máxima distancia: ",PE_ede)),lty = 2,col=c("red","cyan","green"),bty ="n",cex=0.75)
legend("topleft",c(paste("Derivada numérica:",format(round(PE_dnum,2),digits = 2)),
paste("regresión logística: ",format(round(PE_nplr,2),digits = 2)),
paste("Estimador de máxima distancia: ",format(round(PE_ede,2),digits = 2))),
lty = 2,col=c("red","cyan","green"),bty ="n",cex=0.75)
legend("topleft",c(paste("Derivada numérica:",format(round(PE_dnum,2),digits = 2)),
paste("regresión logística: ",format(round(PE_nplr,2),digits = 2)),
paste("Estimador de máxima distancia: ",format(round(PE_ede,2),digits = 2))),
lty = 2,col=c("red","cyan","green"),bty ="n",cex=0.75)
#Resultados
plot(x,y,type="l",col="blue",main="Determinación de punto de inflexión en curva de titulación")
points(x,y,pch=16,cex=0.5)
fT=(max(y)-min(y))/(max(df$dy_dx)-min(df$dy_dx))
lines(df$x_avg,df$dy_dx*fT+min(y),type="l",lty=1,col="gray")
abline(v=c(PE_dnum,PE_nplr,PE_ede),lty=2,col=c("red","cyan","green"))
points(PE_dnum,y_pos_dnum,pch=20,cex=.75,col="red")
arrows(PE_dnum-u_PE_dnum,y_pos_dnum,PE_dnum+u_PE_dnum,y_pos_dnum, length=0.05,angle = 90, code=3, col="red")
points(PE_nplr,y_pos_nplr,pch=20,cex=.75,col="cyan")
arrows(PE_nplr-u_PE_nplr,y_pos_nplr,PE_nplr+u_PE_nplr,y_pos_nplr, length=0.05,angle = 90, code=3, col="cyan")
points(PE_ede,y_pos_nplr,pch=20,cex=.75,col="green")
arrows(PE_ede-u_PE_ede,y_pos_ede,PE_ede+u_PE_ede,y_pos_ede, length=0.05,angle = 90, code=3, col="green")
legend("topleft",c(paste("Derivada numérica:",format(round(PE_dnum,2),digits = 2)),
paste("regresión logística: ",format(round(PE_nplr,2),digits = 2)),
paste("Estimador de máxima distancia: ",format(round(PE_ede,2),digits = 2))),
lty = 2,col=c("red","cyan","green"),bty ="n",cex=0.75)
legend("topleft",c(paste("Derivada numérica:",format(round(PE_dnum,2),nsmall = 2)),
paste("regresión logística: ",format(round(PE_nplr,2),digits = 2)),
paste("Estimador de máxima distancia: ",format(round(PE_ede,2),digits = 2))),
lty = 2,col=c("red","cyan","green"),bty ="n",cex=0.75)
#Resultados
plot(x,y,type="l",col="blue",main="Determinación de punto de inflexión en curva de titulación")
points(x,y,pch=16,cex=0.5)
fT=(max(y)-min(y))/(max(df$dy_dx)-min(df$dy_dx))
lines(df$x_avg,df$dy_dx*fT+min(y),type="l",lty=1,col="gray")
abline(v=c(PE_dnum,PE_nplr,PE_ede),lty=2,col=c("red","cyan","green"))
points(PE_dnum,y_pos_dnum,pch=20,cex=.75,col="red")
arrows(PE_dnum-u_PE_dnum,y_pos_dnum,PE_dnum+u_PE_dnum,y_pos_dnum, length=0.05,angle = 90, code=3, col="red")
points(PE_nplr,y_pos_nplr,pch=20,cex=.75,col="cyan")
arrows(PE_nplr-u_PE_nplr,y_pos_nplr,PE_nplr+u_PE_nplr,y_pos_nplr, length=0.05,angle = 90, code=3, col="cyan")
points(PE_ede,y_pos_nplr,pch=20,cex=.75,col="green")
arrows(PE_ede-u_PE_ede,y_pos_ede,PE_ede+u_PE_ede,y_pos_ede, length=0.05,angle = 90, code=3, col="green")
legend("topleft",c(paste("Derivada numérica:",format(round(PE_dnum,2),nsmall = 2)),
paste("regresión logística: ",format(round(PE_nplr,2),nsmall = 2)),
paste("Estimador de máxima distancia: ",format(round(PE_ede,2),nsmall = 2))),
lty = 2,col=c("red","cyan","green"),bty ="n",cex=0.75)
list("d1num"=data.frame(PE=PE_dnum,u_PE=u_PE_dnum),"rLog"=data.frame(PE=PE_nplr,u_PE=u_PE_nplr),
"ede"=data.frame(PE=PE_ede,u_PE=u_PE_ede))
library(uLPAQ)
#===============================================
# Puntos finales en curvas de titulación
datosAnalisis$valoracionNaOH$V
puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
#===================================
# PE empleando regresion logistica
#======
y.prop=convertToProp(y)
model.logR=nplr(x,y.prop,useLog = FALSE,npars = 5)
#plot(model.logR, ylim = range(0, 1))
rNPLR=summary(model.logR)
puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
#uLPAQ:::forwardDerivative()
PE$ede$u_PE/PE$ede$PE*100
#uLPAQ:::forwardDerivative()
PE$d1num$u_PE/PE$d1num$PE*100
datosAnalisis
x_=datosAnalisis$valoracionNaOH$V
y_=datosAnalisis$valoracionNaOH$pH
x=x_
y=y_
intervalo_x=c(5,15)
which(x>=intervalo_x[1)])
which(x>=intervalo_x[1])
which(x>=intervalo_x[1] & x<=intervalo_x[2])
# if(sum(intervalo)>0.0){
.indx_inf=min(which(x>=intervalo_x[1] & x<=intervalo_x[2]))
.indx_sup=max(which(x>=intervalo_x[1] & x<=intervalo_x[2]))
.indx_inf
.indx_sup
x=x_[.indx_inf:.indx_sup]
y=y_[.indx_inf:.indx_sup]
x
y
#===============================================
# Puntos finales en curvas de titulación
datosAnalisis$valoracionNaOH$V
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
PE
library(uLPAQ)
source('~/OneDrive/DB&Packages/packageTesting_uLAPQ.R', echo=TRUE)
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
source('~/OneDrive/DB&Packages/packageTesting_uLAPQ.R', echo=TRUE)
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
PE
library(uLPAQ)
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
library(uLPAQ)
#===============================================
# Puntos finales en curvas de titulación
datosAnalisis$valoracionNaOH$V
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH)
PE
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(5,13))
PE
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(10,13))
source('~/OneDrive/DB&Packages/packageTesting_uLAPQ.R', echo=TRUE)
PE
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(10.5,11))
PE
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(0,0))
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(6,12))
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(10,12))
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(10,13))
Sys.setlocale("LC_ALL", "ES_ES.UTF-8")
library(uLPAQ)
library(uLPAQ)
library(uLPAQ)
micropipetas=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",7,skip=1)
micropipetas
EMP_materialVidrio=list(pipetas=pipetas,buretas=buretas,balones=balones,micropipetas=micropipetas)
EMP_materialVidrio$pipetas$Nominal
use_data(EMP_materialVidrio,overwrite = TRUE)
use_data(balanzasLPAQ,overwrite = TRUE)
use_data(condAmbientales,overwrite = TRUE)
use_data(datosAnalisis,overwrite = TRUE)
EMP_materialVolumetrico=list(pipetas=pipetas,buretas=buretas,balones=balones,micropipetas=micropipetas)
pipetas=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",1,skip=2)
pipetas
buretas=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",2,skip=2)
buretas
balones=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",3,skip=2)
balones
balanzasLPAQ=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",4,skip=1)
balanzasLPAQ
T_HR=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",5,skip=0)
T_HR
P=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",6,skip=0)
P
micropipetas=read_xlsx("~/OneDrive/DB&Packages/datos_uLPAQ.xlsx",7,skip=1)
micropipetas
condAmbientales=list(T_HR=T_HR,Presion=P)
condAmbientales
EMP_materialVolumetrico=list(pipetas=pipetas,buretas=buretas,balones=balones,micropipetas=micropipetas)
EMP_materialVolumetrico$pipetas$Nominal
#======================================
#INCLUSION OF THE DATA FOR THE PACKAGE
#======================================
setwd(file.path(packagesPath,packName))
getwd()
use_data(EMP_materialVolumetrico,overwrite = TRUE)
use_data(balanzasLPAQ,overwrite = TRUE)
use_data(condAmbientales,overwrite = TRUE)
use_data(datosAnalisis,overwrite = TRUE)
library(uLPAQ)
library(devtools)
library(Deriv)
library(latex2exp)
library(uLPAQ)
u_VT(100,4)
a=instVolumetrico(nominal = 25,tipo = "bureta",clase="B",subdivision = 0.1,volumen = 12.0,temp = 16)
plot(a)
EMP_materialVidrio
EMP_materialVidrio$buretas
EMP_materialVidrio$balones[EMP_materialVidrio$balones$Nominal==100,]
# Conjuntos datos sobre condiciones ambientales
plot(condAmbientales$Presion,cex=0.1)
library(uLPAQ)
u_VT(100,4)
a=instVolumetrico(nominal = 25,tipo = "bureta",clase="B",subdivision = 0.1,volumen = 12.0,temp = 16)
plot(a)
EMP_materialVolumetrico
EMP_materialVolumetrico$buretas
EMP_materialVolumetrico$balones[EMP_materialVolumetrico$balones$Nominal==100,]
# Conjuntos datos sobre condiciones ambientales
plot(condAmbientales$Presion,cex=0.1)
plot(condAmbientales$T_HR$FECHA,condAmbientales$T_HR$T_oC,pch=16)
plot(condAmbientales$T_HR$FECHA,condAmbientales$T_HR$HR,pch=16)
#Incertidumbre de material volumetrico
instVolumetrico(nominal=100,tipo="balon",clase="B")
#Curvas características de balanzas e incertidumbre de una lectura
balanzasLPAQ
b_=u_masa(.08,1636,T = c(18,17,19))
b_
b_$m_s
b_$Bu
U_ms_r=2*b_$m_s$u_ms/b_$m_s$ms*100
U_ms_r
options(scipen=5)
ME204=masa_minima(0.1,densidad = 1500)
plot(ME204$curvaCaracteristica,log="xy",type="b",pch=16,cex=0.5,col="blue",
xlab="masa / mg", ylab=TeX(r'($u_{sr} / \%$)'),las=1, main="Curva característica de balanzas LPAQ")
abline(h=0.1,lty=2)
ME204$masa_min_mg
abline(v=ME204$masa_min_mg,lty=2,col="blue")
val=ME204$masa_min_mg
text(ME204$masa_min_mg,1,bquote(m[min]~"= "~.(ME204$masa_min_mg)~"mg"),pos = 4)
AL54=masa_minima(1,densidad = 200,balanza = "AL54")
AL54$masa_min_mg
lines(AL54$curvaCaracteristica,col="green")
abline(v=AL54$masa_min_mg,lty=2,col="green")
AES220=masa_minima(0.1,densidad = 1634,balanza = "AES220")
AES220$masa_min_mg
lines(AES220$curvaCaracteristica,col="gray")
abline(v=AES220$masa_min_mg,lty=2,col="gray")
XPE205=masa_minima(0.1,densidad = 1500,balanza = "XPE205")
XPE205$masa_min_mg
lines(XPE205$curvaCaracteristica,col="red")
abline(v=XPE205$masa_min_mg,lty=2,col="red")
legend("topright",c("ME204","AL54","AES220","XPE205"),lty = 1,col=c("blue","green","gray","red"),bty ="n")
#===============================================
# Puntos finales en curvas de titulación
datosAnalisis$valoracionNaOH$V
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(10,13))
PE
#uLPAQ:::forwardDerivative()
PE$d1num$u_PE/PE$d1num$PE*100
PE$ede$u_PE/PE$ede$PE*100
EMP_materialVolumetrico
EMP_materialVolumetrico[["micropipetas"]]
nominal=1
EMP_materialVolumetrico[EMP_materialVolumetrico[["micropipetas"]]$Nominal==nominal*1000,]
EMP_materialVolumetrico[["micropipetas"]]$Nominal
EMP_materialVolumetrico[EMP_materialVolumetrico[["micropipetas"]]$Nominal==nominal*1000,]
EMP_materialVolumetrico[EMP_materialVolumetrico[["micropipetas"]]$Nominal==nominal*1000]
EMP_materialVolumetrico[EMP_materialVolumetrico[["micropipetas"]]$Nominal==nominal*1000,]
EMP_materialVolumetrico[["micropipetas"]]$Nominal
EMP_materialVolumetrico[["micropipetas"]]
EMP_materialVolumetrico
EMP_materialVolumetrico[["balones"]]
EMP_materialVolumetrico[["micropipetas"]][EMP_materialVolumetrico[["micropipetas"]]$Nominal==nominal*1000,]
EMP=EMP_materialVolumetrico[["micropipetas"]][EMP_materialVolumetrico[["micropipetas"]]$Nominal==nominal*1000,]
EMP
EMP_s=
unlist(EMP)
EMP_s=
EMP[1]
EMP_s=
EMP[1]
EMP=EMP_materialVolumetrico[["micropipetas"]][EMP_materialVolumetrico[["micropipetas"]]$Nominal==nominal*1000,]
EMP[1]
EMP[[1]]
EMP[[2]]
EMP[[3]]
EMP[[3]]/1000
EMP
6/500
6/500*100
library(uLPAQ)
#==================
# Material volumentrico
a=instVolumetrico(nominal = 25,tipo = "bureta",clase="B",subdivision = 0.1,volumen = 12.0,temp = 16)
plot(a)
a
instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827*1,0.0770*1),t_ref = 25.0)
library(uLPAQ)
#==================
# Material volumentrico
a=instVolumetrico(nominal = 25,tipo = "bureta",clase="B",subdivision = 0.1,volumen = 12.0,temp = 16)
a
instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827*1,0.0770*1),t_ref = 25.0)
0.0827/sqrt(3)
(0.0827/sqrt(3))^2+,0.0770^2
(0.0827/sqrt(3))^2+0.0770^2
sqrt(sum((0.0827/sqrt(3))^2+0.0770^2))
instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827*1,0.0770*1),t_ref = 25.0)
sqrt(sum((0.0827/sqrt(3))^2+0.0770^2))
sqrt(((0.0827/sqrt(3))^2+0.0770^2))
sqrt(((0.0827/sqrt(3))^2+0.0770^2))
library(uLPAQ)
sqrt(((0.0827/sqrt(3))^2+0.0770^2))
instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827*1,0.0770*1,sqrt(3)),t_ref = 25.0)
sqrt(((0.0827/sqrt(3))^2+0.0770^2)) #Con base en certificado de la micropipeta
0.09060679*100
instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827/100*1,0.0770/100*1,sqrt(3)),t_ref = 25.0)
sqrt((((0.0827/100)/sqrt(3))^2+(0.0770/100)^2)) #Con base en certificado de la micropipeta
instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827/100*1,0.0770/100*1,sqrt(3)),t_ref = 25.0)
sqrt((((0.0827/100)/sqrt(3))^2+(0.0770/100)^2)) #Con base en certificado de la micropipeta
0.09060679*100
b=instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827/100*1,0.0770/100*1,sqrt(3)),t_ref = 25.0)
b
b$u_V/b$V*100
remove.packages("uLPAQ")
library(devtools)
library(Deriv)
library(latex2exp)
library(uLPAQ)
library(devtools)
library(Deriv)
library(Deriv)
library(latex2exp)
library(uLPAQ)
install_github('https://github.com/sergmonic/uLPAQ/')
library(uLPAQ)
u_VT(100,4)
#==================
# Material volumentrico
a=instVolumetrico(nominal = 25,tipo = "bureta",clase="B",subdivision = 0.1,volumen = 12.0,temp = 16)
a
b=instVolumetrico(1,"micropipeta",temp = 17.5,calibracion = c(0.0,0.0827/100*1,0.0770/100*1,sqrt(3)),t_ref = 25.0)
b
b$u_V/b$V*100
sqrt((((0.0827/100)/sqrt(3))^2+(0.0770/100)^2)) #Con base en certificado de la micropipeta
EMP_materialVolumetrico
EMP_materialVolumetrico$buretas
EMP_materialVolumetrico
EMP_materialVolumetrico$buretas
#==================================================
# Conjuntos datos sobre condiciones ambientales
plot(condAmbientales$Presion,cex=0.1)
plot(condAmbientales$T_HR$FECHA,condAmbientales$T_HR$T_oC,pch=16)
plot(condAmbientales$T_HR$FECHA,condAmbientales$T_HR$HR,pch=16)
#Incertidumbre de material volumetrico
instVolumetrico(nominal=100,tipo="balon",clase="B")
#Curvas características de balanzas e incertidumbre de una lectura
balanzasLPAQ
b_=u_masa(.08,1636,T = c(18,17,19))
#Incertidumbre balone
instVolumetrico(nominal=100,tipo="balon",clase="B")
#==================================================
# Conjuntos datos sobre condiciones ambientales
plot(condAmbientales$Presion,cex=0.1)
plot(condAmbientales$T_HR$FECHA,condAmbientales$T_HR$T_oC,pch=16)
plot(condAmbientales$T_HR$FECHA,condAmbientales$T_HR$HR,pch=16)
#===================================================================
#Curvas características de balanzas e incertidumbre de una lectura
balanzasLPAQ
b_=u_masa(.08,1636,T = c(18,17,19))
b_
b_$m_s
b_$Bu
U_ms_r=2*b_$m_s$u_ms/b_$m_s$ms*100
U_ms_r
options(scipen=5)
ME204=masa_minima(0.1,densidad = 1500)
plot(ME204$curvaCaracteristica,log="xy",type="b",pch=16,cex=0.5,col="blue",
xlab="masa / mg", ylab=TeX(r'($u_{sr} / \%$)'),las=1, main="Curva característica de balanzas LPAQ")
abline(h=0.1,lty=2)
ME204$masa_min_mg
abline(v=ME204$masa_min_mg,lty=2,col="blue")
val=ME204$masa_min_mg
text(ME204$masa_min_mg,1,bquote(m[min]~"= "~.(ME204$masa_min_mg)~"mg"),pos = 4)
AL54=masa_minima(1,densidad = 200,balanza = "AL54")
AL54$masa_min_mg
lines(AL54$curvaCaracteristica,col="green")
abline(v=AL54$masa_min_mg,lty=2,col="green")
AES220=masa_minima(0.1,densidad = 1634,balanza = "AES220")
AES220$masa_min_mg
lines(AES220$curvaCaracteristica,col="gray")
abline(v=AES220$masa_min_mg,lty=2,col="gray")
XPE205=masa_minima(0.1,densidad = 1500,balanza = "XPE205")
XPE205$masa_min_mg
lines(XPE205$curvaCaracteristica,col="red")
abline(v=XPE205$masa_min_mg,lty=2,col="red")
legend("topright",c("ME204","AL54","AES220","XPE205"),lty = 1,col=c("blue","green","gray","red"),bty ="n")
#===============================================
# Puntos finales en curvas de titulación
datosAnalisis$valoracionNaOH$V
PE=puntoFinal(datosAnalisis$valoracionNaOH$V,datosAnalisis$valoracionNaOH$pH,intervalo_x = c(10,13))
PE
#uLPAQ:::forwardDerivative()
PE$d1num$u_PE/PE$d1num$PE*100
PE$ede$u_PE/PE$ede$PE*100
H3PO4_titration_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",4)
library(devtools)
library(roxygen2)
library(readxl)
library(here)
library(usethis)
##################################################################
# Package project creation
##################################################################
packagesPath="~/OneDrive/DB&Packages"
setwd(packagesPath)
#packName="AtomicWeights"
packName="uLPAQ"
KC_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",1)
KC_data
KCCV_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",2)
KCCV_data
NaOH_titration_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",3)
NaOH_titration_data
H3PO4_titration_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",4)
H3PO4_titration_data
H3PO4_titration_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",4)
H3PO4_titration_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",5)
H3PO4_titration_data
plot(H3PO4_titration_data$pH)
H3PO4_titration_data=read_xlsx("~/OneDrive/DB&Packages/Data.xlsx",5)
H3PO4_titration_data
datosAnalisis=list("KC"=KC_data,"Consenso"=KCCV_data,"valoracionNaOH"=NaOH_titration_data,"valoracionH3PO4"=H3PO4_titration_data)
#======================================
#INCLUSION OF THE DATA FOR THE PACKAGE
#======================================
setwd(file.path(packagesPath,packName))
getwd()
use_data(datosAnalisis,overwrite = TRUE)
library(uLPAQ)
datosAnalisis$valoracionH3PO4
plot(datosAnalisis$valoracionH3PO4)
plot(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH)
PE2=puntoFinal(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,intervalo_x = c(1,8))
PE2
plot(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH)
PE2=puntoFinal(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,intervalo_x = c(1,8))
PE2=puntoFinal(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,intervalo_x = c(4,6))
PE2
plot(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH)
PE1=puntoFinal(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,intervalo_x = c(4,6))
PE1
plot(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH)
PE2=puntoFinal(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,intervalo_x = c(9,15))
PE2
PE1
PE2
PE2=puntoFinal(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,intervalo_x = c(10,12))
PE2
PE2=puntoFinal(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,intervalo_x = c(9,12))
PE2
uLPAQ:::forwardDerivative(datosAnalisis$valoracionH3PO4$pH,datosAnalisis$valoracionH3PO4$V)
dC=uLPAQ:::forwardDerivative(datosAnalisis$valoracionH3PO4$pH,datosAnalisis$valoracionH3PO4$V)
dc
dC
plot(dC$dy_dx,dC$x_avg)
plot(dC$x_avg,dC$dy_dx)
lines(datosAnalisis$valoracionH3PO4$V,datosAnalisis$valoracionH3PO4$pH,col="blue")
dC=uLPAQ:::forwardDerivative(datosAnalisis$valoracionH3PO4$pH,datosAnalisis$valoracionH3PO4$V)
plot(dC$x_avg,dC$dy_dx)
lines(datosAnalisis$valoracionH3PO4$pH,datosAnalisis$valoracionH3PO4$V,col="blue")
remove.packages("uLPAQ")
library(devtools)
library(Deriv)
library(latex2exp)
install_github('https://github.com/sergmonic/uLPAQ/')
datosAnalisis$valoracionH3PO4
library(uLPAQ)
datosAnalisis$valoracionH3PO4
library(uLPAQ)
datosAnalisis$valoracionH3PO4
remove.packages("uLPAQ")
library(devtools)
library(Deriv)
library(latex2exp)
install_github('https://github.com/sergmonic/uLPAQ/')
library(uLPAQ)
datosAnalisis$valoracionH3PO4
View(datosAnalisis)
View(datosAnalisis[["valoracionH3PO4"]])
View(datosAnalisis[["KC"]])
datosAnalisis[["Consenso"]]
library(uLPAQ)
library(uLPAQ)
u_VT(100,4)
ME204=masa_minima(0.1,densidad = 1500)
plot(ME204$curvaCaracteristica,log="xy",type="b",pch=16,cex=0.5,col="blue",
xlab="masa / mg", ylab=TeX(r'($u_{sr} / \%$)'),las=1, main="Curva característica de balanzas LPAQ")
abline(h=0.1,lty=2)
ME204$masa_min_mg
AtomicWeights::atomicWeightsData
getAtomicWeight("H")
getAtomicWeight(element = "H")
library(AtomicWeights)
library(uLPAQ)
getAtomicWeight(element = "H")
getMolarMass(atomsType = c("C","H"))
getMolarMass(atomsType = c("C","H"))
getMolarMass(atomsType = c("C","H"),c(1,4))
bureta25=instVolumetrico(nominal=25,tipo="bureta",clase="A",temp=16)
bureta25=instVolumetrico(nominal=25,subdivision =0.1 ,tipo="bureta",clase="A",temp=16)
bureta25=instVolumetrico(nominal=25,subdivision =0.1 ,tipo="bureta",clase="A_AS",temp=16)
library(uLPAQ)
masa_minima(u_r = 0.1,densidad = 1000,balanza = "ME204")
masa_minima(u_r = 0.1,densidad = 8000,balanza = "ME204")
masa_minima(u_r = 0.1,densidad = 10000,balanza = "ME204")
masa_minima(u_r = 0.1,densidad = 10000,balanza = "ME204")
masa_minima(u_r = 0.1,densidad = 15000,balanza = "ME204")
masa_minima(u_r = 0.1,densidad = 100,balanza = "ME204")
masa_minima(u_r = 0.1,densidad = 100,balanza = "AL54")
masa_minima(u_r = 0.1,densidad = 100,balanza = "XPE205")
u_masa(lectura = 0.0601,densidad = 1634,balanza = "XPE205")
masa=u_masa(lectura = 0.0601,densidad = 1634,balanza = "XPE205")
masa$m_s$ms
masa$m_s$u_ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.0601,densidad = 1634,balanza = "ME204")
masa$m_s$ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.0601,densidad = 1000,balanza = "ME204")
masa$m_s$ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.0601,densidad = 2000,balanza = "ME204")
masa$m_s$ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.00601,densidad = 2000,balanza = "ME204")
masa$m_s$ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.0010,densidad = 1000,balanza = "ME204")
masa$m_s$ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.0010,densidad = 2000,balanza = "ME204")
masa$m_s$ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.010,densidad = 2000,balanza = "ME204")
masa$m_s$ms
masa$m_s$u_ms/masa$m_s$ms*100
masa=u_masa(lectura = 0.010,densidad = 2000,balanza = "ME204")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
